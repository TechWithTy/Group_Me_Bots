import os
import json
import requests
from dotenv import load_dotenv

from AWS import keys

load_dotenv()

ACCESS_TOKEN = os.environ.get('ZB_PROMO')
# print(ACCESS_TOKEN, 'ACCESS_TOKEN')

if not ACCESS_TOKEN:
    TOKEN_OBJ = json.loads(keys.get_secret("ZB_PROMO"))

    ACCESS_TOKEN = TOKEN_OBJ.get('ZB_PROMO')
    if ACCESS_TOKEN:
        print("Group Me Token Updated")
# Load environment variables from .env file


"""Group_Me_Auto_Post.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oITT6EyLRr3TcbONVV7-KxevZs1EmjHT
"""
formatted_text = f"""\
69ine gets left 
bloody in gym
"""
post_interval = 2


# Commented out IPython magic to ensure Python compatibility.
# %pip install json
# %pip install markdown

# @title Formatted Text


#################################################################
# @title Post function


# Get Group me Url For Images
def upload_image_to_groupme(image_url):
    # Download the image from the URL
    image_data = requests.get(image_url).content

    # Set up the headers and data for the GroupMe API request
    headers = {
        "X-Access-Token": "sfWtsmhMR1II4z7WKxPqtXXV7ny10lM1SDnn0QbV",
        "Content-Type": "image/jpeg"
    }
    data = image_data

    # Make the API request to upload the image
    response = requests.post(
        "https://image.groupme.com/pictures", headers=headers, data=data)

    if response.status_code != 200:
        print(f"Failed to upload image. Status code: {response.status_code}, Response text: {response.text}")
        return None

    # Check if 'payload' and 'url' exist in the response before accessing them.
    payload = response.json().get('payload')
    if not payload:
        print("No 'payload' in the response")
        return None
    url = payload.get('url')
    if not url:
        print("No 'url' in the 'payload'")
        return None
    return url
    
    # If the above checks fail or we didn't get a vaalid URL, return None or handle it appropriately
    

def send_message_to_groups(new_bots: list, message: str, files: list = None) -> str:
    """
    Sends a message to the specified GroupMe groups via the corresponding bots.

    Args:
        new_bots (list): A list of bot objects, where each object contains a 'bot_id' and 'group_id'.
        message (str): The message to be sent to the groups.
        files (list, optional): A list of file paths to be attached to the message. Defaults to None.

    Returns:
        str: A string indicating the message was sent to all groups successfully.

    Raises:
        Exception: If an error occurs while sending the message to any of the groups.
    """
    url = 'https://api.groupme.com/v3/bots/post'
    headers = {'Content-Type': 'application/json',
               'X-Access-Token': ACCESS_TOKEN}
    payload = {'text': message, 'attachments': []}

    if files:
        for file_path in files:
            if file_path:  # Ensure file_path is not None
                print(file_path)
                cross_ending_tag = os.path.splitext(file_path)[0]
                ending_tag = '.' + cross_ending_tag.split('.')[-1]
            else:
             print("Found a None file_path in the list")
            try:
                if ending_tag in ['.jpg', '.jpeg', '.png', '.gif']:
                    # Upload image to GroupMe and add it to the message's attachments
                    payload['attachments'].append({'type': 'image', 'url': file_path})
                elif ending_tag in ['.mp4', '.mov']:
                    # Add video to the message's attachments
                    payload['attachments'].append({'type': 'video', 'url': file_path})
                else:
                    print(f"Unsupported file type: {ending_tag}")
            except Exception as e:
                print(f"Error adding attachment {file_path}: {str(e)}")
    for i, bot in enumerate(new_bots):
        bot_id = bot['bot_id']
        group_id = bot['group_id']
        payload['bot_id'] = bot_id

        response = requests.post(url, headers=headers, json=payload)

        if response.status_code != 202:
            print(
                f"Error sending message by bot '{bot_id}' to group '{group_id}'. Status code: {response.status_code}")
            print("message:",message)
        else:
            print(
                f"Bot: '{bot_id}' sent message to group '{group_id}'. Status code: {response.status_code}")

    return "Message sent to all groups successfully."


# @title  Post Message Periodically
