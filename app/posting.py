import time
import requests
import __main__
from dotenv import load_dotenv
import os
import json
from AWS import  keys
load_dotenv()

ACCESS_TOKEN = os.environ.get('ZB_PROMO')
# print(ACCESS_TOKEN, 'ACCESS_TOKEN')

if not ACCESS_TOKEN:
    TOKEN_OBJ = json.load(keys.get_secret("ZB_PROMO"))
    ACCESS_TOKEN = TOKEN_OBJ.get('ZB_PROMO')
# Load environment variables from .env file



"""Group_Me_Auto_Post.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oITT6EyLRr3TcbONVV7-KxevZs1EmjHT
"""
formatted_text = f"""\
69ine gets left 
bloody in gym
"""
post_interval = 2



# Commented out IPython magic to ensure Python compatibility.
# %pip install json
# %pip install markdown

# @title Formatted Text




#################################################################
# @title Post function 


def send_message_to_groups(new_bots: list, message: str) -> str:
    """
    Sends a message to the specified GroupMe groups via the corresponding bots.

    Args:
        new_bots (list): A list of bot objects, where each object contains a 'bot_id' and 'group_id'.
        message (str): The message to be sent to the groups.

    Returns:
        str: A string indicating the message was sent to all groups successfully.

    Raises:
        Exception: If an error occurs while sending the message to any of the groups.
    """
    url = 'https://api.groupme.com/v3/bots/post'
    headers = {'Content-Type': 'application/json',
               'X-Access-Token': ACCESS_TOKEN}
    payload = {'text': message, 'attachments': []}
    # print('new_bots)', new_bots)
    for i, bot in enumerate(new_bots):
        bot_id = bot['bot_id']
        group_id = bot['group_id']
        payload['bot_id'] = bot_id
        if i > 0:
            time.sleep(1)
        response = requests.post(
            url, headers=headers, data=json.dumps(payload))
        if response.status_code == 202:
            print(f"Message sent by bot '{bot_id}' to group '{group_id}'.")
        else:
            raise Exception(
                f"Error sending message by bot '{bot_id}' to group '{group_id}'. Status code: {response.status_code}")

    return "Message sent to all groups successfully."






# @title  Post Message Periodically




def post_periodically(post_interval,filtered_bots,new_message):
    """
    Posts a message to the specified GroupMe groups via the corresponding bots
    every specified number of hours.

    Args:
        auth_token (str): The GroupMe access token for authentication.
        bots (list): A list of bot objects, where each object contains a 'bot_id' and 'group_id'.
        message (str): The message to be sent to the groups.
        post_interval (int): The number of hours to wait between each post.

    Returns:
        None
    """
    print("Post Run")
    while True:
        time.sleep(post_interval * 3600)
        send_message_to_groups(filtered_bots, new_message)





