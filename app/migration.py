# -*- coding: utf-8 -*-
"""GroupMe Migrate.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tzpnGmGTjaz-mivud-4ju3TsmrfuSkBs
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install requests
# %pip install json
import time
import requests
import __main__
from dotenv import load_dotenv
import os
import json
from AWS import  keys
# Replace these values with your own GroupMe access token and group IDs
load_dotenv()
ACCESS_TOKEN = os.environ.get('ZB_PROMO')

if not ACCESS_TOKEN:
    TOKEN_OBJ = json.load(keys.get_secret("ZB_PROMO"))
    ACCESS_TOKEN = TOKEN_OBJ.get('ZB_PROMO')
    


tally_tree = {}
atl_tree = {}
tx_tree = {}
group_tree = {}

tally_tree['main'] ="91209188"
tally_tree['main_subleasing'] ="29789330"
tally_tree['trvphouse'] ="46205813"
tally_tree['BLmA'] ="45636922"
tally_tree['2k23'] ="87323365"
tally_tree['famu_fsu'] ="12752316"
tally_tree['miami_sb'] ="91640204"

atl_tree['main'] ="91211459"
atl_tree['bud_dr'] ="64253197"



tx_tree['main'] ="91512963"
tx_tree['pv'] ="87234765"
tx_tree['better_buds'] ="64742388"


group_tree['bws'] ="91766597"
group_tree['onbcu'] ="91449681"

ORIGINAL_GROUP_ID = tx_tree['main']
TARGET_GROUP_ID = tx_tree['main']

multiple = True
multiple_targ = [group_tree['bws'],group_tree['onbcu']]
multiple_og = [atl_tree['main'],tally_tree['main']]
multiple_arr = [{"og":tally_tree['main_subleasing'], "trg": group_tree['bws'] },]
# Retrieve the list of members from the original group
def migrate_users():  
        url = f"https://api.groupme.com/v3/groups/{ORIGINAL_GROUP_ID}?token={ACCESS_TOKEN}"
        response = requests.get(url)
        data = json.loads(response.text)
        members = data["response"]["members"]
        RETRY_DELAY = 0.5
        MAX_RETRIES = 10
        users = 0
        # Add the members to the target group
        for i in range(MAX_RETRIES):  
            for member in members:
                users += 1
                try:
                    url = f"https://api.groupme.com/v3/groups/{TARGET_GROUP_ID}/members/add?token={ACCESS_TOKEN}"
                    payload = {"members": [{"nickname": member["nickname"], "user_id": member["user_id"]}] }
                    headers = {'Content-type': 'application/json'}
                    response = requests.post(url, data=json.dumps(payload), headers=headers)
                    print(response.text)
                except requests.exceptions.RequestException as e:
                    print(f"Request failed: {e}")
                    print(f"Retrying in {RETRY_DELAY} seconds...")
                    time.sleep(RETRY_DELAY)
        # Online Python compiler (interpreter) to run Python online.
        # Write Python 3 code in this online editor and run it.
        print("Finished Migrating")   

def migrate_users_multiple_tar():  
        url = f"https://api.groupme.com/v3/groups/{ORIGINAL_GROUP_ID}?token={ACCESS_TOKEN}"
        response = requests.get(url)
        data = json.loads(response.text)
        members = data["response"]["members"]

        # Add the members to the target group
        for member in members:
            for targ in multiple_targ:
              url = f"https://api.groupme.com/v3/groups/{targ}/members/add?token={ACCESS_TOKEN}"
              payload = {"members": [{"nickname": member["nickname"], "user_id": member["user_id"]}] }
              headers = {'Content-type': 'application/json'}
              response = requests.post(url, data=json.dumps(payload), headers=headers)
              print(response.text)
              time.sleep(1)
        # Online Python compiler (interpreter) to run Python online.
        # Write Python 3 code in this online editor and run it.
        print("Finished Migrating")   

def migrate_users_multiple_og():
      for targ in multiple_og:
        count = 0  
        url = f"https://api.groupme.com/v3/groups/{targ}?token={ACCESS_TOKEN}"
        response = requests.get(url)
        data = json.loads(response.text)
        if count == 0:
          members = data["response"]["members"]
          count +=1
        else:
          members.extend(data)
          count +=1

        # Add the members to the target group
        for member in members:
            
              url = f"https://api.groupme.com/v3/groups/{targ}/members/add?token={ACCESS_TOKEN}"
              payload = {"members": [{"nickname": member["nickname"], "user_id": member["user_id"]}] }
              headers = {'Content-type': 'application/json'}
              response = requests.post(url, data=json.dumps(payload), headers=headers)
              print(response.text)
              time.sleep(1)
        # Online Python compiler (interpreter) to run Python online.
        # Write Python 3 code in this online editor and run it.
        print("Finished Migrating")  

def migrate_users_multiple_max():
      users = 0
      for targ in multiple_og:
        count = 0  
        url = f"https://api.groupme.com/v3/groups/{targ}?token={ACCESS_TOKEN}"
        response = requests.get(url)
        data = json.loads(response.text)
        if count == 0:
          members = data["response"]["members"]
        else:
          members.extend(data)
          
        MAX_RETRIES = 10
        RETRY_DELAY = 0.3 
        # Add the members to the target group
        for member in members:
            users +=1
            for targ in multiple_targ:
              for i in range(MAX_RETRIES):
                try:
                  url = f"https://api.groupme.com/v3/groups/{targ}/members/add?token={ACCESS_TOKEN}"
                  payload = {"members": [{"nickname": member["nickname"], "user_id": member["user_id"]}] }
                  headers = {'Content-type': 'application/json'}
                  response = requests.post(url, data=json.dumps(payload), headers=headers)
                  print(response.text)
                except requests.exceptions.RequestException as e:
                  print(f"Request failed: {e}")
                  print(f"Retrying in {RETRY_DELAY} seconds...")
                  time.sleep(RETRY_DELAY)
        # Add the members to the target group
        # for member in members:
        #     for targ in multiple_targ:
            
        #       url = f"https://api.groupme.com/v3/groups/{targ}/members/add?token={ACCESS_TOKEN}"
        #       payload = {"members": [{"nickname": member["nickname"], "user_id": member["user_id"]}] }
        #       headers = {'Content-type': 'application/json'}
        #       response = requests.post(url, data=json.dumps(payload), headers=headers)
        #       print(response.text)
              
        # Online Python compiler (interpreter) to run Python online.
        # Write Python 3 code in this online editor and run it.
        print(f"{users} Migrated")   
for i in range(1):
  # migrate_users_multiple_max()
  migrate_users()

import requests
import json
import time
# Replace these values with your own GroupMe access token and group IDs
Zb_Promo = "BxqbDXTL1uWYbFVeYFLwYyhloIOb1aS3mMMQOO60"
Twin_Nem =  "tL3KIMhqTZO1mfpkzoqhgHhMcT1dHaQaLwwhbHPF"
group_tree = {}

ACCESS_TOKEN = Zb_Promo
group_tree['tally'] ="91204401"
group_tree['peach'] ="91211459"

ORIGINAL_GROUP_ID = "92369842"
TARGET_GROUP_ID = group_tree['peach']

# Retrieve the list of members from the original group
def migrate_users():  
        url = f"https://api.groupme.com/v3/groups/{ORIGINAL_GROUP_ID}?token={ACCESS_TOKEN}"
        response = requests.get(url)
        data = json.loads(response.text)
        members = data["response"]["members"]

        # Add the members to the target group
        for member in members:
            url = f"https://api.groupme.com/v3/groups/{TARGET_GROUP_ID}/members/add?token={ACCESS_TOKEN}"
            payload = {"members": [{"nickname": member["nickname"], "user_id": member["user_id"]}] }
            headers = {'Content-type': 'application/json'}
            response = requests.post(url, data=json.dumps(payload), headers=headers)
            print(response.text)
            time.sleep(1)
        # Online Python compiler (interpreter) to run Python online.
        # Write Python 3 code in this online editor and run it.
        print("Finished Migrating")   
for i in range(3):
  migrate_users()

